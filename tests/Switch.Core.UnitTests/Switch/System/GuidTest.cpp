#include <Switch/System/Guid.hpp>
#include <Switch/System/Collections/Generic/Dictionary.hpp>
#include <gtest/gtest.h>

using namespace System;
using namespace System::Collections::Generic;

namespace SwitchUnitTests {
  TEST(GuidTest, CreateGuid) {
    ASSERT_EQ("00000000-0000-0000-0000-000000000000", Guid().ToString());
  }
  
  TEST(GuidTest, CreateGuidFromNativeByteArray) {
    const byte nativeByteGuid[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
    ASSERT_EQ("01020304-0506-0708-090a-0b0c0d0e0f10", Guid(nativeByteGuid).ToString());
  }
  
  TEST(GuidTest, CreateGuidFromByteArray) {
    ASSERT_EQ("10203040-5060-7080-90a0-b0c0d0e0f001", Guid(Array<byte> {0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0x01}).ToString());
  }
  
  TEST(GuidTest, Constructor) {
    const byte nativeByteRest[]  = {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10};
    ASSERT_EQ("01020304-0506-0708-090a-0b0c0d0e0f10", Guid(0x01020304, 0x0506, 0x0708, nativeByteRest).ToString());
    
    ASSERT_EQ("10203040-5060-7080-90a0-b0c0d0e0f001", Guid(0x10203040, 0x5060, 0x7080, Array<byte> {0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0x01}).ToString());
    
    ASSERT_EQ("01020304-0506-0708-090a-0b0c0d0e0f10", Guid(int32(0x01020304), int16(0x0506), int16(0x0708), 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10).ToString());
    ASSERT_EQ("10203040-5060-7080-90a0-b0c0d0e0f001", Guid(uint32(0x10203040), uint16(0x5060), uint16(0x7080), 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0x01).ToString());
  }
  
  TEST(GuidTest, Constructor2) {
    Guid guid = Guid::NewGuid();
    ASSERT_GT(guid.CompareTo(Guid::Empty()), 0);
    ASSERT_LT(Guid::Empty().CompareTo(guid), 0);
    
    ASSERT_EQ(Guid(Int32(0x00000000), Int16(0x0000), Int16(0x0000), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01).CompareTo(Guid(Int32(0x00000000), Int16(0x0000), Int16(0x0000), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01)), 0);
    ASSERT_LT(Guid(Int32(0x00000000), Int16(0x0000), Int16(0x0000), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01).CompareTo(Guid(Int32(0x00000000), Int16(0x0000), Int16(0x0000), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02)), 0);
    ASSERT_GT(Guid(Int32(0x00000000), Int16(0x0000), Int16(0x0000), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02).CompareTo(Guid(Int32(0x00000000), Int16(0x0000), Int16(0x0000), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01)), 0);
  }
  
  TEST(GuidTest, Equals) {
    Guid guid = Guid::NewGuid();
    Guid guid2 = Guid::NewGuid();
    ASSERT_FALSE(guid.Equals(Guid::Empty()));
    ASSERT_FALSE(guid.Equals(guid2));
  }

  TEST(GuidTest, NewGuid) {
    Dictionary<Guid, Guid> guids;
    for (int32 i = 0; i < 1'000; i++) {
      Guid guid = Guid::NewGuid();
      ASSERT_FALSE(guids.ContainsKey(guid));
      guids.Add(guid, guid);
    }
  }
  
  TEST(GuidTest, ToString) {
    ASSERT_THROW(Guid::Empty().ToString("A"), FormatException);
    ASSERT_THROW(Guid::Empty().ToString("ND"), FormatException);
    
    ASSERT_EQ("00000000-0000-0000-0000-000000000000", Guid::Empty().ToString());
    ASSERT_EQ("00000000-0000-0000-0000-000000000000", Guid::Empty().ToString(""));
    ASSERT_EQ("00000000000000000000000000000000", Guid::Empty().ToString("N"));
    ASSERT_EQ("00000000-0000-0000-0000-000000000000", Guid::Empty().ToString("D"));
    ASSERT_EQ("{00000000-0000-0000-0000-000000000000}", Guid::Empty().ToString("B"));
    ASSERT_EQ("(00000000-0000-0000-0000-000000000000)", Guid::Empty().ToString("P"));
    ASSERT_EQ("{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}", Guid::Empty().ToString("X"));
    ASSERT_EQ("00000000000000000000000000000000", Guid::Empty().ToString("n"));
    ASSERT_EQ("00000000-0000-0000-0000-000000000000", Guid::Empty().ToString("d"));
    ASSERT_EQ("{00000000-0000-0000-0000-000000000000}", Guid::Empty().ToString("b"));
    ASSERT_EQ("(00000000-0000-0000-0000-000000000000)", Guid::Empty().ToString("p"));
    ASSERT_EQ("{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}", Guid::Empty().ToString("x"));
  }
  
  TEST(GuidTest, CompareTo) {
    Guid guid1(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10});
    Guid guid2(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    
    ASSERT_LT(guid1.CompareTo(guid2), 0);
    ASSERT_GT(guid2.CompareTo(guid1), 0);
  }
  
  TEST(GuidTest, LessThanOperator) {
    Guid guid1(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10});
    Guid guid2(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    
    ASSERT_TRUE(guid1 < guid2);
    ASSERT_FALSE(guid2 < guid1);
  }
  
  TEST(GuidTest, LessEqualOperator) {
    Guid guid1(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10});
    Guid guid2(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    Guid guid3(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10});
    
    ASSERT_TRUE(guid1 <= guid2);
    ASSERT_TRUE(guid1 <= guid3);
    ASSERT_FALSE(guid2 <= guid1);
  }
  
  TEST(GuidTest, GreateThanOperator) {
    Guid guid1(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    Guid guid2(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10});
    
    ASSERT_TRUE(guid1 > guid2);
    ASSERT_FALSE(guid2 > guid1);
  }
  
  TEST(GuidTest, GreaterEqualOperator) {
    Guid guid1(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    Guid guid2(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10});
    Guid guid3(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    
    ASSERT_TRUE(guid1 >= guid2);
    ASSERT_TRUE(guid1 >= guid3);
    ASSERT_FALSE(guid2 >= guid1);
  }
  
  TEST(GuidTest, EqualOperator) {
    Guid guid1(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    Guid guid2(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10});
    Guid guid3(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    
    ASSERT_FALSE(guid1 == guid2);
    ASSERT_TRUE(guid1 == guid3);
  }
  
  TEST(GuidTest, DifferentOperator) {
    Guid guid1(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    Guid guid2(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10});
    Guid guid3(0x01020304, 0x0506, 0x0708, {0x09, 0x0A, 0x0B, 0x0C, 0x3D, 0x0E, 0x0F, 0x10});
    
    ASSERT_TRUE(guid1 != guid2);
    ASSERT_FALSE(guid1 != guid3);
  }
}
