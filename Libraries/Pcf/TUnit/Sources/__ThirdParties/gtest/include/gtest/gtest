#pragma once

#include "gtest.h"

#if __ANDROID__
#define __GTEST__NULL__ ((void*)0)
#else
#define __GTEST__NULL__ NULL
#endif

#define EXPECT_NULL(statement) EXPECT_TRUE(statement == __GTEST__NULL__)
#define ASSERT_NULL(statement) ASSERT_TRUE(statement == __GTEST__NULL__)

#define EXPECT_NEG(val) EXPECT_LT(val, 0)
#define ASSERT_NEG(val) ASSERT_LT(val, 0)

#define EXPECT_POS(val) EXPECT_GT(val, 0)
#define ASSERT_POS(val) ASSERT_GT(val, 0)

#define EXPECT_ZERO(val) EXPECT_EQ(0, val)
#define ASSERT_ZERO(val) ASSERT_EQ(0, val)


#define EXPECT_B1(b, bytes) \
EXPECT_EQ(1, bytes.Length);\
EXPECT_EQ(b, bytes[0]);

#define EXPECT_B2(b1, b2, bytes) \
EXPECT_EQ(2, bytes.Length);\
if (System::BitConverter::IsLittleEndian()) {\
  EXPECT_EQ(b1, bytes[0]);\
  EXPECT_EQ(b2, bytes[1]);\
} else {\
  EXPECT_EQ(b1, bytes[1]);\
  EXPECT_EQ(b2, bytes[0]);\
}

#define EXPECT_B4(b1, b2, b3, b4, bytes) \
EXPECT_EQ(4, bytes.Length);\
if (System::BitConverter::IsLittleEndian()) {\
  EXPECT_EQ(b1, bytes[0]);\
  EXPECT_EQ(b2, bytes[1]);\
  EXPECT_EQ(b3, bytes[2]);\
  EXPECT_EQ(b4, bytes[3]);\
} else {\
  EXPECT_EQ(b1, bytes[3]);\
  EXPECT_EQ(b2, bytes[2]);\
  EXPECT_EQ(b3, bytes[1]);\
  EXPECT_EQ(b4, bytes[0]);\
}

#define EXPECT_B8(b1, b2, b3, b4, b5, b6, b7, b8, bytes) \
EXPECT_EQ(8, bytes.Length);\
if (System::BitConverter::IsLittleEndian()) {\
  EXPECT_EQ(b1, bytes[0]);\
  EXPECT_EQ(b2, bytes[1]);\
  EXPECT_EQ(b3, bytes[2]);\
  EXPECT_EQ(b4, bytes[3]);\
  EXPECT_EQ(b5, bytes[4]);\
  EXPECT_EQ(b6, bytes[5]);\
  EXPECT_EQ(b7, bytes[6]);\
  EXPECT_EQ(b8, bytes[7]);\
} else {\
  EXPECT_EQ(b1, bytes[7]);\
  EXPECT_EQ(b2, bytes[6]);\
  EXPECT_EQ(b3, bytes[5]);\
  EXPECT_EQ(b4, bytes[4]);\
  EXPECT_EQ(b5, bytes[3]);\
  EXPECT_EQ(b6, bytes[2]);\
  EXPECT_EQ(b7, bytes[1]);\
  EXPECT_EQ(b8, bytes[0]);\
}

#define EXPECT_B16(b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, bytes) \
EXPECT_EQ(16, bytes.Length);\
if (System::BitConverter::IsLittleEndian()) {\
  EXPECT_EQ(b1, bytes[0]);\
  EXPECT_EQ(b2, bytes[1]);\
  EXPECT_EQ(b3, bytes[2]);\
  EXPECT_EQ(b4, bytes[3]);\
  EXPECT_EQ(b5, bytes[4]);\
  EXPECT_EQ(b6, bytes[5]);\
  EXPECT_EQ(b7, bytes[6]);\
  EXPECT_EQ(b8, bytes[7]);\
  EXPECT_EQ(b9, bytes[8]);\
  EXPECT_EQ(b10, bytes[9]);\
  EXPECT_EQ(b11, bytes[10]);\
  EXPECT_EQ(b12, bytes[11]);\
  EXPECT_EQ(b13, bytes[12]);\
  EXPECT_EQ(b14, bytes[13]);\
  EXPECT_EQ(b15, bytes[14]);\
  EXPECT_EQ(b16, bytes[15]);\
} else {\
  EXPECT_EQ(b1, bytes[7]);\
  EXPECT_EQ(b2, bytes[6]);\
  EXPECT_EQ(b3, bytes[5]);\
  EXPECT_EQ(b4, bytes[4]);\
  EXPECT_EQ(b5, bytes[3]);\
  EXPECT_EQ(b6, bytes[2]);\
  EXPECT_EQ(b7, bytes[1]);\
  EXPECT_EQ(b8, bytes[0]);\
  EXPECT_EQ(b9, bytes[15]);\
  EXPECT_EQ(b10, bytes[14]);\
  EXPECT_EQ(b11, bytes[13]);\
  EXPECT_EQ(b12, bytes[12]);\
  EXPECT_EQ(b13, bytes[11]);\
  EXPECT_EQ(b14, bytes[10]);\
  EXPECT_EQ(b15, bytes[9]);\
  EXPECT_EQ(b16, bytes[8]);\
}
