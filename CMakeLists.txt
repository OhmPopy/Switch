cmake_minimum_required(VERSION 3.2)

project(Switch VERSION 0.4.1)

option(BUILD_SWITCH_CORE "Build Switch.Core library" ON)
option(BUILD_SWITCH_SYSTEM "Build Switch.System library" ON)
option(BUILD_SWITCH_SYSTEM_CORE "Build Switch.System.Core library" ON)
option(BUILD_SWITCH_SYSTEM_DRAWING "Build Switch.System.Drawing library" ON)
option(BUILD_SWITCH_SYSTEM_SERVICEMODEL "Build Switch.System.ServiceModel library" ON)
option(BUILD_SWITCH_SYSTEM_WINDOWS_FORMS "Build Switch.System.Windows.Forms library" ON)
option(BUILD_SWITCH_TUNIT_CORE "Build Switch.TUnit.Core library" ON)
option(BUILD_SWITCH_TUNIT_FRAMEWORK "Build Switch.TUnit.Framework library" OFF)
option(BUILD_SWITCH_TUNIT_MAIN "Build Switch.TUnit.Main library" ON)
option(BUILD_TESTS "Build tests" OFF)

enable_testing()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX d)
endif()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
else()
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/${CMAKE_BUILD_TYPE})
endif()

include(scripts/cmake/MakeLibraryProject.cmake)
include(scripts/cmake/MakeTestProject.cmake)
include(scripts/cmake/SwitchDependencies.cmake)

file(WRITE src/Switch.Core/src/Native/EnvironmentVersionApi.cpp "#include \"Api.hpp\"\n\nSystem::Version Native::EnvironmentApi::GetVersion() {\n  return System::Version::Parse(\"${Switch_VERSION}\");\n}\n")
file(WRITE appveyor.yml "version: ${Switch_VERSION}.{build}\nimage: Visual Studio 2017\n\nbuild_script: scripts/appveyor/build_script.bat\ntest_script: scripts/appveyor/test_script.bat\n")
file(WRITE install.sh "export switch_version=${Switch_VERSION}\nscripts/install/install.sh \"$@\"\n")
file(WRITE install.bat "@set switch_version=${Switch_VERSION}\n@call scripts\\install\\install.bat %*\n")
file(WRITE src/Switch/include/Switch/Switch.hpp "#pragma once\n\n")

message(STATUS "Generating Switch ${Switch_VERSION}")

if (BUILD_SWITCH_CORE)
  message(STATUS "  [X] Switch.Core")
  add_subdirectory("src/Switch.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.Core\"\n")
else()
  message(STATUS "  [ ] Switch.Core")
endif()

if (BUILD_SWITCH_SYSTEM)
  message(STATUS "  [X] Switch.System")
  add_subdirectory("src/Switch.System")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System\"\n")
else()
  message(STATUS "  [ ] Switch.System")
endif()

if (BUILD_SWITCH_SYSTEM_CORE)
  message(STATUS "  [X] Switch.System.Core")
  add_subdirectory("src/Switch.System.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Core\"\n")
else()
  message(STATUS "  [ ] Switch.System.Core")
endif()

if (BUILD_SWITCH_SYSTEM_DRAWING)
  message(STATUS "  [X] Switch.System.Drawing")
  add_subdirectory("src/Switch.System.Drawing")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Drawing\"\n")
else()
  message(STATUS "  [ ] Switch.System.Drawing")
endif()

if (BUILD_SWITCH_SYSTEM_SERVICEMODEL)
  message(STATUS "  [X] Switch.System.ServiceModel")
  add_subdirectory("src/Switch.System.ServiceModel")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.ServiceModel\"\n")
else()
  message(STATUS "  [ ] Switch.System.ServiceModel")
endif()

if (BUILD_SWITCH_SYSTEM_WINDOWS_FORMS)
  message(STATUS "  [X] Switch.System.Windows.Forms")
  add_subdirectory("src/Switch.System.Windows.Forms")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Windows.Forms\"\n")
else()
  message(STATUS "  [ ] Switch.System.Windows.Forms")
endif()

if (BUILD_SWITCH_TUNIT_CORE)
  message(STATUS "  [X] Switch.TUnit.Core")
  add_subdirectory("src/Switch.TUnit.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.TUnit.Core\"\n")
else()
  message(STATUS "  [ ] Switch.TUnit.Core")
endif()

if (BUILD_SWITCH_TUNIT_FRAMEWORK)
  message(STATUS "  [X] Switch.TUnit.Framework")
  add_subdirectory("src/Switch.TUnit.Framework")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.TUnit.Framework\"\n")
else()
  message(STATUS "  [ ] Switch.TUnit.Framework")
endif()

if (BUILD_SWITCH_TUNIT_MAIN)
  message(STATUS "  [X] Switch.TUnit.Main")
  add_subdirectory("src/Switch.TUnit.Main")
else()
  message(STATUS "  [ ] Switch.TUnit.Main")
endif()

if (BUILD_TESTS)
  message(STATUS "Building Switch Tests")
  if (BUILD_SWITCH_CORE)
    message(STATUS "  [X] Switch.Core.ManualTests")
    add_subdirectory("tests/Switch.Core.ManualTests")
    message(STATUS "  [X] Switch.Core.UnitTests")
    add_subdirectory("tests/Switch.Core.UnitTests")
  else()
    message(STATUS "  [ ] Switch.Core.ManualTests")
    message(STATUS "  [ ] Switch.Core.UnitTests")
  endif()
  
  if (BUILD_SWITCH_SYSTEM)
    message(STATUS "  [X] Switch.System.ManualTests")
    add_subdirectory("tests/Switch.System.ManualTests")
    message(STATUS "  [X] Switch.System.UnitTests")
    add_subdirectory("tests/Switch.System.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.ManualTests")
    message(STATUS "  [ ] Switch.System.UnitTests")
  endif()
  
  if (BUILD_SWITCH_SYSTEM_DRAWING)
    message(STATUS "  [X] Switch.System.Drawing.ManualTests")
    add_subdirectory("tests/Switch.System.Drawing.ManualTests")
    message(STATUS "  [X] Switch.System.Drawing.UnitTests")
    add_subdirectory("tests/Switch.System.Drawing.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.Drawing.ManualTests")
    message(STATUS "  [ ] Switch.System.Drawing.UnitTests")
  endif()
  
  if (BUILD_SWITCH_SYSTEM_WINDOWS_FORMS)
    message(STATUS "  [X] Switch.System.Windows.Forms.ManualTests")
    add_subdirectory("tests/Switch.System.Windows.Forms.ManualTests")
    message(STATUS "  [X] Switch.System.Windows.Forms.UnitTests")
    add_subdirectory("tests/Switch.System.Windows.Forms.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.Windows.Forms.ManualTests")
    message(STATUS "  [ ] Switch.System.Windows.Forms.UnitTests")
  endif()
  
  if (BUILD_SWITCH_TUNIT_CORE)
    message(STATUS "  [X] Switch.TUnit.ManualTests")
    add_subdirectory("tests/Switch.TUnit.ManualTests")
    message(STATUS "  [X] Switch.TUnit.UnitTests")
    add_subdirectory("tests/Switch.TUnit.UnitTests")
  else()
    message(STATUS "  [ ] Switch.TUnit.ManualTests")
    message(STATUS "  [ ] Switch.TUnit.UnitTests")
  endif()
  
  if (BUILD_SWITCH_TUNIT_FRAMEWORK)
    message(STATUS "  [X] Switch.TUnit.Framework.ManualTests")
    add_subdirectory("tests/Switch.TUnit.Framework.ManualTests")
  else()
    message(STATUS "  [ ] Switch.TUnit.Framework.ManualTests")
  endif()

  if (CMAKE_BUILD_TYPE)
    set(TEST_TYPE ${CMAKE_BUILD_TYPE})
  else()  
    set(TEST_TYPE Debug)
  endif()

  if (APPLE)
    add_custom_target(tests COMMAND ctest --output-on-failure -C ${TEST_TYPE} DEPENDS install)
  else()
    add_custom_target(tests COMMAND ctest --output-on-failure -C ${TEST_TYPE})
  endif()
endif()

add_subdirectory("src/Switch")

message(STATUS "Compiler [${CMAKE_CXX_COMPILER_ID}]")
message(STATUS "System [${CMAKE_SYSTEM}]")
if (NOT CMAKE_BUILD_TYPE)
  message(STATUS "Build type [{null}]")
else()
  message(STATUS "Build type [${CMAKE_BUILD_TYPE}]")
endif()
message(STATUS "Install prefix [${CMAKE_INSTALL_PREFIX}]")

install(EXPORT Switch DESTINATION cmake)
install(FILES scripts/cmake/SwitchConfig.cmake scripts/cmake/SwitchDependencies.cmake DESTINATION cmake)

find_package(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxygen/Switch.Doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(documentation ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Generating API documentation with Doxygen" VERBATIM)
endif(DOXYGEN_FOUND)
