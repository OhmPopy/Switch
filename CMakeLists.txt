cmake_minimum_required(VERSION 3.2)

project(Switch VERSION 0.4.1)

option(BUILD_SWITCH_3RDPARTY "Build 3rdparty library" ON)
option(BUILD_SWITCH_CORE "Build Switch.Core library" ON)
option(BUILD_SWITCH_SYSTEM "Build Switch.System library" ON)
option(BUILD_SWITCH_SYSTEM_CORE "Build Switch.System.Core library" ON)
option(BUILD_SWITCH_SYSTEM_DRAWING "Build Switch.System.Drawing library" ON)
option(BUILD_SWITCH_SYSTEM_SERVICEMODEL "Build Switch.System.ServiceModel library" ON)
option(BUILD_SWITCH_SYSTEM_WINDOWS_FORMS "Build Switch.System.Windows.Forms library" ON)
option(BUILD_SWITCH_TUNIT_CORE "Build Switch.TUnit.Core library" OFF)
option(BUILD_SWITCH_TUNIT_FRAMEWORK "Build Switch.TUnit.Framework library" ON)
option(BUILD_SWITCH_TUNIT_MAIN "Build Switch.TUnit.Main library" OFF)
option(BUILD_TESTS "Build tests" OFF)

enable_testing()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX d)
endif()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
else()
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/${CMAKE_BUILD_TYPE})
endif()

include(scripts/cmake/MakeLibraryProject.cmake)
include(scripts/cmake/MakeTestProject.cmake)

#include(scripts/cmake/SwitchDependencies.cmake)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(MSVC)
  set(SWITCH_GUI WIN32)
  set(STANDARD_CORE_LINK_LIBRARIES ws2_32 iphlpapi rpcrt4)    
  set(STANDARD_GRAPHIC_LINK_LIBRARIES uxtheme comctl32)
elseif (APPLE)
  set(SWITCH_GUI MACOSX_BUNDLE)
  set(STANDARD_CORE_LINK_LIBRARIES dl ncurses)	
  set(STANDARD_GRAPHIC_LINK_LIBRARIES )
  set(COCOA_FRAMEWORK "-framework Carbon -framework Cocoa -framework ApplicationServices -framework Foundation")
elseif(UNIX)
  find_package(PkgConfig)
  pkg_check_modules(GTKMM gtkmm-3.0)
  if(NOT GTKMM_FOUND)
    message(FATAL_ERROR "gtkmm-3.0 not found!")
  endif()
  include_directories(${GTKMM_INCLUDE_DIRS})
  link_directories(${GTKMM_LIBRARY_DIRS})
  set(SWITCH_GUI)
  set(STANDARD_CORE_LINK_LIBRARIES dl rt uuid)
  set(STANDARD_GRAPHIC_LINK_LIBRARIES ${GTKMM_LIBRARIES})
endif ()	

file(WRITE src/Switch.Core/src/Native/EnvironmentVersionApi.cpp "#include \"Api.hpp\"\n\nSystem::Version Native::EnvironmentApi::GetVersion() {\n  return System::Version::Parse(\"${Switch_VERSION}\");\n}\n")
file(WRITE install.sh "export switch_version=${Switch_VERSION}\nscripts/install/install.sh \"$@\"\n")
#file(WRITE install.bat "@echo off\nREM Read this first :\nREM =================\nREM\nREM Before using this install.bat file, be sure you are in \"Developer Command Prompt for \nREM VS 2017\" or \"Developer Command Prompt for VS 2015\" command box or be sure your path\nREM environment variable contains the folder path containing \"devenv.exe\" program \nREM (if you do not change the default directory when installing it is \nREM \"C:\\Program Files\\Visual Studio 15\\Common7\\IDE\"; otherwise is your specified path + \nREM \"\\Common7\\IDE\" to terminate). In other case the installation will failed.\nREM\nREM The install.bat file run with all version of Visual Studio 2015 (expect \nREM \"Express Edition\") and all version of Visual Studio 2017.\nREM\nREM If you are using Visual Studio 2015 Express Edition upgrade to Visual Studio 2017 \nREM Community Edition (download from https://www.visualstudio.com).\nREM\nREM\nREM VCPKG\nREM =====\nREM\nREM If you want use vcpkg and if it not installed on your system, open a cmd box type next lines to install it :\nREM\nREM mkdir C:/Users/YourName/Projects/vcpkg\nREM cd C:/Users/YourName/Projects/vcpkg\nREM git clone https://github.com/Microsoft/vcpkg .\nREM .\\bootstrap-vcpkg.bat\nREM .\\vcpkg integrate install\nREM\nREM You can now invoke install.bat with vcpkg like this :\nREM\nREM install.bat /VCPKG C:/Users/YourName/Projects/vcpkg\nREM \nREM Remarks\nREM -------\nREM By default vcpkg install x86 packages. You can set system environment variable VCPKG_DEFAULT_TRIPLET=x64-windows for x64 packages.\nREM see https://github.com/Microsoft/vcpkg and https://vcpkg.readthedocs.io/en/latest/ for more informations.\n\nset switch_version=${Switch_VERSION}\nif \"%1\" == \"/?\" (\n  call scripts\\install\\install.bat /help\n) else (\n  call scripts\\install\\install.bat %*\n)\n")
file(WRITE install.bat "@echo off\nREM Read this first :\nREM =================\nREM\nREM The install.bat file run with all version of Visual Studio 2015 (expect \nREM \"Express Edition\") and all version of Visual Studio 2017.\nREM\nREM If you are using Visual Studio 2015 Express Edition upgrade to Visual Studio 2017 \nREM Community Edition (download from https://www.visualstudio.com).\nREM\nREM\nREM VCPKG\nREM =====\nREM\nREM If you want use vcpkg and if it not installed on your system, open a cmd box type next lines to install it :\nREM\nREM mkdir C:/Users/YourName/Projects/vcpkg\nREM cd C:/Users/YourName/Projects/vcpkg\nREM git clone https://github.com/Microsoft/vcpkg .\nREM .\\bootstrap-vcpkg.bat\nREM .\\vcpkg integrate install\nREM\nREM You can now invoke install.bat with vcpkg like this :\nREM\nREM install.bat /VCPKG C:/Users/YourName/Projects/vcpkg\nREM \nREM Remarks\nREM -------\nREM By default vcpkg install x86 packages. You can set system environment variable VCPKG_DEFAULT_TRIPLET=x64-windows for x64 packages.\nREM see https://github.com/Microsoft/vcpkg and https://vcpkg.readthedocs.io/en/latest/ for more informations.\n\nset switch_version=${Switch_VERSION}\nif \"%1\" == \"/?\" (\n  call scripts\\install\\install.bat /help\n) else (\n  call scripts\\install\\install.bat %*\n)\n")
file(WRITE src/Switch/include/Switch/Switch.hpp "#pragma once\n\n")

if (BUILD_SWITCH_3RDPARTY)
  message(STATUS "Generating 3rdparty")
  
  message(STATUS "  [X] call_stack")
  add_subdirectory(3rdparty/call_stack)
  set_target_properties(call_stack PROPERTIES FOLDER 3rdparty)
  message(STATUS "  [X] curl")
  if(MSVC)
    option(BUILD_TESTING "Build the testing tree" OFF)
    option(ENABLE_MANUAL "to provie the built-in manual" OFF)
    add_subdirectory(3rdparty/curl)
    set_target_properties(curl PROPERTIES FOLDER 3rdparty)
  else()
    find_package(CURL REQUIRED)
  endif()
  message(STATUS "  [X] easywsclient")
  add_subdirectory(3rdparty/easywsclient)
  set_target_properties(easywsclient PROPERTIES FOLDER 3rdparty)
  message(STATUS "  [X] googletest")
  option(BUILD_GMOCK "Build the google mock subproject" OFF)
  option(BUILD_GTEST "Build the google test subproject" ON)
  add_subdirectory(3rdparty/googletest)
  set_target_properties(gtest PROPERTIES FOLDER 3rdparty)
  set_target_properties(gtest_main PROPERTIES FOLDER 3rdparty)
  message(STATUS "  [X] Rs232")
  add_subdirectory(3rdparty/rs232)
  set_target_properties(Rs232 PROPERTIES FOLDER 3rdparty)
  message(STATUS "  [X] zlib")
  add_subdirectory(3rdparty/zlib)
  set_target_properties(zlib PROPERTIES FOLDER 3rdparty)
  message(STATUS "  [X] jpeg")
  add_subdirectory(3rdparty/jpeg)
  set_target_properties(jpeg PROPERTIES FOLDER 3rdparty)
  message(STATUS "  [X] libpng")
  add_subdirectory(3rdparty/libpng)
  set_target_properties(libpng PROPERTIES FOLDER 3rdparty)
  message(STATUS "  [X] threads")
  find_package(Threads REQUIRED)
else()
  message(STATUS "  [ ] call_stack")
  message(STATUS "  [ ] curl")
  message(STATUS "  [ ] easywsclient")
  message(STATUS "  [ ] gtest")
  message(STATUS "  [ ] Rs232")
  message(STATUS "  [ ] zlib")
  message(STATUS "  [ ] jpeg")
  message(STATUS "  [ ] libpng")
  message(STATUS "  [ ] threads")
endif()


message(STATUS "Generating Switch ${Switch_VERSION}")

if (BUILD_SWITCH_CORE)
  message(STATUS "  [X] Switch.Core")
  add_subdirectory("src/Switch.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.Core\"\n")
else()
  message(STATUS "  [ ] Switch.Core")
endif()

if (BUILD_SWITCH_SYSTEM)
  message(STATUS "  [X] Switch.System")
  add_subdirectory("src/Switch.System")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System\"\n")
else()
  message(STATUS "  [ ] Switch.System")
endif()

if (BUILD_SWITCH_SYSTEM_CORE)
  message(STATUS "  [X] Switch.System.Core")
  add_subdirectory("src/Switch.System.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Core\"\n")
else()
  message(STATUS "  [ ] Switch.System.Core")
endif()

if (BUILD_SWITCH_SYSTEM_DRAWING)
  message(STATUS "  [X] Switch.System.Drawing")
  add_subdirectory("src/Switch.System.Drawing")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Drawing\"\n")
else()
  message(STATUS "  [ ] Switch.System.Drawing")
endif()

if (BUILD_SWITCH_SYSTEM_SERVICEMODEL)
  message(STATUS "  [X] Switch.System.ServiceModel")
  add_subdirectory("src/Switch.System.ServiceModel")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.ServiceModel\"\n")
else()
  message(STATUS "  [ ] Switch.System.ServiceModel")
endif()

if (BUILD_SWITCH_SYSTEM_WINDOWS_FORMS)
  message(STATUS "  [X] Switch.System.Windows.Forms")
  add_subdirectory("src/Switch.System.Windows.Forms")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Windows.Forms\"\n")
else()
  message(STATUS "  [ ] Switch.System.Windows.Forms")
endif()

if (BUILD_SWITCH_TUNIT_CORE)
  message(STATUS "  [X] Switch.TUnit.Core")
  add_subdirectory("src/Switch.TUnit.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.TUnit.Core\"\n")
else()
  message(STATUS "  [ ] Switch.TUnit.Core")
endif()

if (BUILD_SWITCH_TUNIT_FRAMEWORK)
  message(STATUS "  [X] Switch.TUnit.Framework")
  add_subdirectory("src/Switch.TUnit.Framework")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.TUnit.Framework\"\n")
else()
  message(STATUS "  [ ] Switch.TUnit.Framework")
endif()

if (BUILD_SWITCH_TUNIT_MAIN)
  message(STATUS "  [X] Switch.TUnit.Main")
  add_subdirectory("src/Switch.TUnit.Main")
else()
  message(STATUS "  [ ] Switch.TUnit.Main")
endif()

if (BUILD_TESTS)
  message(STATUS "Generating Tests")
  if (BUILD_SWITCH_CORE)
    message(STATUS "  [X] Switch.Core.ManualTests")
    add_subdirectory("tests/Switch.Core.ManualTests")
    message(STATUS "  [X] Switch.Core.UnitTests")
    add_subdirectory("tests/Switch.Core.UnitTests")
  else()
    message(STATUS "  [ ] Switch.Core.ManualTests")
    message(STATUS "  [ ] Switch.Core.UnitTests")
  endif()
  
  if (BUILD_SWITCH_SYSTEM)
    message(STATUS "  [X] Switch.System.ManualTests")
    add_subdirectory("tests/Switch.System.ManualTests")
    message(STATUS "  [X] Switch.System.UnitTests")
    add_subdirectory("tests/Switch.System.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.ManualTests")
    message(STATUS "  [ ] Switch.System.UnitTests")
  endif()
  
  if (BUILD_SWITCH_SYSTEM_DRAWING)
    message(STATUS "  [X] Switch.System.Drawing.ManualTests")
    add_subdirectory("tests/Switch.System.Drawing.ManualTests")
    message(STATUS "  [X] Switch.System.Drawing.UnitTests")
    add_subdirectory("tests/Switch.System.Drawing.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.Drawing.ManualTests")
    message(STATUS "  [ ] Switch.System.Drawing.UnitTests")
  endif()
  
  if (BUILD_SWITCH_SYSTEM_WINDOWS_FORMS)
    message(STATUS "  [X] Switch.System.Windows.Forms.ManualTests")
    add_subdirectory("tests/Switch.System.Windows.Forms.ManualTests")
    message(STATUS "  [X] Switch.System.Windows.Forms.UnitTests")
    add_subdirectory("tests/Switch.System.Windows.Forms.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.Windows.Forms.ManualTests")
    message(STATUS "  [ ] Switch.System.Windows.Forms.UnitTests")
  endif()
  
  if (BUILD_SWITCH_TUNIT_CORE)
    message(STATUS "  [X] Switch.TUnit.ManualTests")
    add_subdirectory("tests/Switch.TUnit.ManualTests")
    message(STATUS "  [X] Switch.TUnit.UnitTests")
    add_subdirectory("tests/Switch.TUnit.UnitTests")
  else()
    message(STATUS "  [ ] Switch.TUnit.ManualTests")
    message(STATUS "  [ ] Switch.TUnit.UnitTests")
  endif()
  
  if (BUILD_SWITCH_TUNIT_FRAMEWORK)
    message(STATUS "  [X] Switch.TUnit.Framework.ManualTests")
    add_subdirectory("tests/Switch.TUnit.Framework.ManualTests")
  else()
    message(STATUS "  [ ] Switch.TUnit.Framework.ManualTests")
  endif()

  if (CMAKE_BUILD_TYPE)
    set(TEST_TYPE ${CMAKE_BUILD_TYPE})
  else()  
    set(TEST_TYPE Debug)
  endif()

  if (APPLE)
    add_custom_target(tests COMMAND ctest --output-on-failure -C ${TEST_TYPE} DEPENDS install)
  else()
    add_custom_target(tests COMMAND ctest --output-on-failure -C ${TEST_TYPE})
  endif()
endif()

add_subdirectory("src/Switch")

message(STATUS "Compiler [${CMAKE_CXX_COMPILER_ID}]")
message(STATUS "System [${CMAKE_SYSTEM}]")
if (NOT CMAKE_BUILD_TYPE)
  message(STATUS "Build type [{null}]")
else()
  message(STATUS "Build type [${CMAKE_BUILD_TYPE}]")
endif()
message(STATUS "Install prefix [${CMAKE_INSTALL_PREFIX}]")

install(EXPORT Switch DESTINATION cmake)
install(FILES scripts/cmake/SwitchConfig.cmake scripts/cmake/SwitchDependencies.cmake DESTINATION cmake)

find_package(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxygen/Switch.Doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(documentation ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Generating API documentation with Doxygen" VERBATIM)
endif(DOXYGEN_FOUND)
