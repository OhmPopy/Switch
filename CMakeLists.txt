cmake_minimum_required(VERSION 3.2)

project(Switch VERSION 0.3.4)

option(BUILD_CORE "Build Switch.Core library" ON)
option(BUILD_DRAWING "Build Switch.Drawing library" ON)
option(BUILD_FORMS "Build Switch.Forms library" ON)
option(BUILD_SYSTEM "Build Switch.System library" OFF)
option(BUILD_TUNIT "Build Switch.TUnit and Switch.TUnit.Main libraries" ON)
option(BUILD_TESTS "Build tests" OFF)

enable_testing()

if (APPLE)
  SET(CMAKE_CXX_FLAGS "-Wall -Wextra -Wpedantic -Wdeprecated-declarations -Wno-unknown-pragmas -Wno-unused-parameter")
elseif (UNIX)
  SET(CMAKE_CXX_FLAGS "-Wall -Wpedantic -Wdeprecated-declarations -Wno-unknown-pragmas -Wno-unused-parameter")
elseif (MSVC)
  set(CMAKE_CXX_FLAGS "/D_WINSOCK_DEPRECATED_NO_WARNINGS /DCURL_STATICLIB /DWIN32 /D_WINDOWS /DUNICODE /D_UNICODE /D_CRT_SECURE_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /Zm1000 /bigobj /EHsc /GR /MP /Oy- /W4 /wd4003 /wd4100 /wd4127 /wd4132 /wd4133 /wd4189 /wd4244 /wd4245 /wd4310 /wd4312 /wd4355 /wd4389 /wd4456 /wd4458 /wd4505 /wd4510 /wd4512 /wd4610 /wd4701 /wd4702 /wd4706 /wd4996")
endif ()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX d)
endif()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
else ()
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/${CMAKE_BUILD_TYPE})
endif ()

include(SwitchDependencies.cmake)

# Summary
message(STATUS "Building Switch ${Switch_VERSION}")
if (BUILD_CORE)
  message(STATUS "  [X] Core")
else()
  message(STATUS "  [ ] Core")
endif()
if (BUILD_DRAWING)
  message(STATUS "  [X] Drawing")
else()
  message(STATUS "  [ ] Drawing")
endif()
if (BUILD_FORMS)
  message(STATUS "  [X] Forms")
else()
  message(STATUS "  [ ] Forms")
endif()
if (BUILD_SYSTEM)
  message(STATUS "  [X] System")
else()
  message(STATUS "  [ ] System")
endif()
if (BUILD_TUNIT)
  message(STATUS "  [X] TUnit")
else()
  message(STATUS "  [ ] TUnit")
endif()
if (BUILD_TESTS)
  message(STATUS "  [X] Tests")
else()
  message(STATUS "  [ ] Tests")
endif()
message(STATUS "Compiler [${CMAKE_CXX_COMPILER_ID}]")
message(STATUS "System [${CMAKE_SYSTEM}]")
message(STATUS "Build type [${CMAKE_BUILD_TYPE}]")

if (BUILD_CORE)
  add_subdirectory("sources/Core")
endif()

if (BUILD_DRAWING)
  add_subdirectory("sources/Drawing")
endif()

if (BUILD_FORMS)
  add_subdirectory("sources/Forms")
endif()

if (BUILD_SYSTEM)
  add_subdirectory("sources/System")
endif()

if (BUILD_TUNIT)
  add_subdirectory("sources/TUnit")
  add_subdirectory("sources/TUnit.Main")
endif()

add_subdirectory("sources/Switch")

install(EXPORT Switch DESTINATION cmake)
install(FILES SwitchConfig.cmake SwitchDependencies.cmake DESTINATION cmake)

find_package(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxygen/Switch.Doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(documentation ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Generating API documentation with Doxygen" VERBATIM)
endif(DOXYGEN_FOUND)
