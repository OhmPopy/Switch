cmake_minimum_required(VERSION 3.2)

project(Switch VERSION 0.4.0)

option(BUILD_SWITCH_CORE "Build Switch.Core library" ON)
option(BUILD_SWITCH_SYSTEM "Build Switch.System library" ON)
option(BUILD_SWITCH_SYSTEM_CORE "Build Switch.System.Core library" ON)
option(BUILD_SWITCH_SYSTEM_DRAWING "Build Switch.System.Drawing library" ON)
option(BUILD_SWITCH_SYSTEM_WINDOWS_FORMS "Build Switch.System.Windows.Forms library" ON)
option(BUILD_SWITCH_TUNIT_CORE "Build Switch.TUnit.Core library" ON)
option(BUILD_SWITCH_TUNIT_MAIN "Build Switch.TUnit.Main library" ON)
option(BUILD_TESTS "Build tests" OFF)

enable_testing()

if (MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(NOT CMAKE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX d)
endif()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
else()
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/${CMAKE_BUILD_TYPE})
endif()

include(scripts/cmake/GroupSources.cmake)
include(scripts/cmake/SwitchDependencies.cmake)

file(WRITE src/Switch.Core/src/Native/EnvironmentVersionApi.cpp "#include \"Api.hpp\"\n\n")
file(APPEND src/Switch.Core/src/Native/EnvironmentVersionApi.cpp "System::Version Native::EnvironmentApi::GetVersion() {\n")
file(APPEND src/Switch.Core/src/Native/EnvironmentVersionApi.cpp "  return System::Version::Parse(\"${Switch_VERSION}\");\n")
file(APPEND src/Switch.Core/src/Native/EnvironmentVersionApi.cpp "}\n")

file(WRITE install.sh "export switch_version=${Switch_VERSION}\n")
file(APPEND install.sh "scripts/install/install.sh \"$@\"\n")

file(WRITE install.bat "@echo off\n")
file(APPEND install.bat "REM Read this first :\n")
file(APPEND install.bat "REM =================\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM Before using this install.bat file, be sure you are in \"Developer Command Prompt for \n")
file(APPEND install.bat "REM VS 2017\" or \"Developer Command Prompt for VS 2015\" command box or be sure your path\n")
file(APPEND install.bat "REM environment variable contains the folder path containing \"devenv.exe\" program \n")
file(APPEND install.bat "REM (if you do not change the default directory when installing it is \n")
file(APPEND install.bat "REM \"C:\\Program Files\\Visual Studio 15\\Common7\\IDE\"; otherwise is your specified path + \n")
file(APPEND install.bat "REM \"\\Common7\\IDE\" to terminate). In other case the installation will failed.\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM The install.bat file run with all version of Visual Studio 2015 (expect \n")
file(APPEND install.bat "REM \"Express Edition\") and all version of Visual Studio 2017.\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM If you are using Visual Studio 2015 Express Edition upgrade to Visual Studio 2017 \n")
file(APPEND install.bat "REM Community Edition (download from https://www.visualstudio.com).\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM VCPKG\n")
file(APPEND install.bat "REM =====\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM If you want use vcpkg and if it not installed on your system, open a cmd box type next lines to install it :\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM mkdir C:/Users/YourName/Projects/vcpkg\n")
file(APPEND install.bat "REM cd C:/Users/YourName/Projects/vcpkg\n")
file(APPEND install.bat "REM git clone https://github.com/Microsoft/vcpkg .\n")
file(APPEND install.bat "REM .\\bootstrap-vcpkg.bat\n")
file(APPEND install.bat "REM .\\vcpkg integrate install\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM You can now invoke install.bat with vcpkg like this :\n")
file(APPEND install.bat "REM\n")
file(APPEND install.bat "REM install.bat /VCPKG C:/Users/YourName/Projects/vcpkg\n")
file(APPEND install.bat "REM \n")
file(APPEND install.bat "REM Remarks\n")
file(APPEND install.bat "REM -------\n")
file(APPEND install.bat "REM By default vcpkg install x86 packages. You can set system environment variable VCPKG_DEFAULT_TRIPLET=x64-windows for x64 packages.\n")
file(APPEND install.bat "REM see https://github.com/Microsoft/vcpkg and https://vcpkg.readthedocs.io/en/latest/ for more informations.\n")
file(APPEND install.bat "\n")
file(APPEND install.bat "set switch_version=${Switch_VERSION}\n")
file(APPEND install.bat "call scripts\\install\\install.bat %*\n")


file(WRITE src/Switch/include/Switch/Switch.hpp "#pragma once\n\n")

# Summary
message(STATUS "Building Switch ${Switch_VERSION}")
if (BUILD_SWITCH_CORE)
  message(STATUS "  [X] Switch.Core")
  add_subdirectory("src/Switch.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.Core\"\n")
else()
  message(STATUS "  [ ] Switch.Core")
endif()
if (BUILD_SWITCH_SYSTEM)
  message(STATUS "  [X] Switch.System")
  add_subdirectory("src/Switch.System")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System\"\n")
else()
  message(STATUS "  [ ] Switch.System")
endif()
if (BUILD_SWITCH_SYSTEM_CORE)
  message(STATUS "  [X] Switch.System.Core")
  add_subdirectory("src/Switch.System.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Core\"\n")
else()
  message(STATUS "  [ ] Switch.System.Core")
endif()
if (BUILD_SWITCH_SYSTEM_DRAWING)
  message(STATUS "  [X] Switch.System.Drawing")
  add_subdirectory("src/Switch.System.Drawing")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Drawing\"\n")
else()
  message(STATUS "  [ ] Switch.System.Drawing")
endif()
if (BUILD_SWITCH_SYSTEM_WINDOWS_FORMS)
  message(STATUS "  [X] Switch.System.Windows.Forms")
  add_subdirectory("src/Switch.System.Windows.Forms")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.System.Windows.Forms\"\n")
else()
  message(STATUS "  [ ] Switch.System.Windows.Forms")
endif()
if (BUILD_SWITCH_TUNIT_CORE)
  message(STATUS "  [X] Switch.TUnit.Core")
  add_subdirectory("src/Switch.TUnit.Core")
  file(APPEND src/Switch/include/Switch/Switch.hpp "#include \"Switch/Switch.TUnit.Core\"\n")
else()
  message(STATUS "  [ ] Switch.TUnit.Core")
endif()
if (BUILD_SWITCH_TUNIT_MAIN)
  message(STATUS "  [X] Switch.TUnit.Main")
  add_subdirectory("src/Switch.TUnit.Main")
else()
  message(STATUS "  [ ] Switch.TUnit.Main")
endif()
if (BUILD_TESTS)
  message(STATUS "Building Switch Tests")
  if (BUILD_SWITCH_CORE)
    message(STATUS "  [X] Switch.Core.ManualTests")
    add_subdirectory("tests/Switch.Core.ManualTests")
    message(STATUS "  [X] Switch.Core.UnitTests")
    add_subdirectory("tests/Switch.Core.UnitTests")
  else()
    message(STATUS "  [ ] Switch.Core.ManualTests")
    message(STATUS "  [ ] Switch.Core.UnitTests")
  endif()
  if (BUILD_SWITCH_SYSTEM)
    message(STATUS "  [X] Switch.System.ManualTests")
    add_subdirectory("tests/Switch.System.ManualTests")
    message(STATUS "  [X] Switch.System.UnitTests")
    add_subdirectory("tests/Switch.System.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.ManualTests")
    message(STATUS "  [ ] Switch.System.UnitTests")
  endif()
  if (BUILD_SWITCH_SYSTEM_DRAWING)
    message(STATUS "  [X] Switch.System.Drawing.ManualTests")
    add_subdirectory("tests/Switch.System.Drawing.ManualTests")
    message(STATUS "  [X] Switch.System.Drawing.UnitTests")
    add_subdirectory("tests/Switch.System.Drawing.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.Drawing.ManualTests")
    message(STATUS "  [ ] Switch.System.Drawing.UnitTests")
  endif()
  if (BUILD_SWITCH_SYSTEM_WINDOWS_FORMS)
    message(STATUS "  [X] Switch.System.Windows.Forms.ManualTests")
    add_subdirectory("tests/Switch.System.Windows.Forms.ManualTests")
    message(STATUS "  [X] Switch.System.Windows.Forms.UnitTests")
    add_subdirectory("tests/Switch.System.Windows.Forms.UnitTests")
  else()
    message(STATUS "  [ ] Switch.System.Windows.Forms.ManualTests")
    message(STATUS "  [ ] Switch.System.Windows.Forms.UnitTests")
  endif()
  if (BUILD_SWITCH_TUNIT_CORE)
    message(STATUS "  [X] Switch.TUnit.ManualTests")
    add_subdirectory("tests/Switch.TUnit.ManualTests")
    message(STATUS "  [X] Switch.TUnit.UnitTests")
    add_subdirectory("tests/Switch.TUnit.UnitTests")
  else()
    message(STATUS "  [ ] Switch.TUnit.ManualTests")
    message(STATUS "  [ ] Switch.TUnit.UnitTests")
  endif()
endif()
add_subdirectory("src/Switch")

message(STATUS "Compiler [${CMAKE_CXX_COMPILER_ID}]")
message(STATUS "System [${CMAKE_SYSTEM}]")
message(STATUS "Build type [${CMAKE_BUILD_TYPE}]")
message(STATUS "Install prefix [${CMAKE_INSTALL_PREFIX}]")

install(EXPORT Switch DESTINATION cmake)
install(FILES scripts/cmake/SwitchConfig.cmake scripts/cmake/SwitchDependencies.cmake DESTINATION cmake)

find_package(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxygen/Switch.Doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(documentation ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMENT "Generating API documentation with Doxygen" VERBATIM)
endif(DOXYGEN_FOUND)
